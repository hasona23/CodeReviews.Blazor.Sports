@page "/matchMaking"
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using Microsoft.AspNetCore.Authorization
@using SportStatisticsApp.Components.Dialogs
@using SportStatisticsApp.Data
@using SportStatisticsApp.Models
@using SportStatisticsApp.Models.Dtos
@using SportStatisticsApp.Services.MatchActions
@using SportStatisticsApp.Services.Matches
@using SportStatisticsApp.Services.Users
@rendermode InteractiveServer
@attribute [Authorize(Roles = $"{Roles.Coach}")]
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (_match == null)
{
    if (_inputModel != null)
    {
        <div style="display: grid;place-items: center">

            <MudTextField Style="min-width:80%;margin:40px" AdornmentIcon="@Icons.Material.Outlined.Edit"
                          Adornment="Adornment.End" Placeholder="Name" @bind-Value="_inputModel.Name"
                          For="() => _inputModel.Name" Required/>
            <MudDatePicker Style="min-width:80%;margin:40px" @bind-Date="_inputModel.MatchDate" Clearable="false"
                           Required/>
            <MudTimePicker Style="min-width:80%;margin:40px" @bind-Time="_inputModel.MatchTime" Clearable="false"
                           Required/>
            <MudButton Style="min-width:20%;margin:40px" Color="Color.Primary" OnClick="SubmitMatchData">Submit
            </MudButton>
        </div>
    }
}
else
{
    <MudText Style="align-self: center;justify-self: center" Align="Align.Center" Typo="Typo.h3">@_match.Name</MudText>
    <MudText Style="align-self: center;justify-self: center" Align="Align.Center"
             Typo="Typo.h5">@(DurationSinceBegin().Minutes.ToString("00")) : @(DurationSinceBegin().Seconds.ToString("00"))</MudText>
    <MudButtonGroup Style="display: flex;align-items: center;justify-content: center;margin:10px"
                    Variant="Variant.Outlined" OverrideStyles="false">
        <MudIconButton
            OnClick="@(_isMatchRunning ? PauseMatch : ContinueMatch)"
            Color="@(_isMatchRunning ? Color.Info : Color.Primary)"
            Variant="Variant.Outlined"
            title="@(_isMatchRunning ? "Pause" : "Continue")"
            Icon="@(_isMatchRunning ? Icons.Material.Filled.Pause : Icons.Material.Filled.PlayArrow)"
        />

        <MudIconButton
            OnClick="EndMatch"
            Variant="Variant.Outlined"
            Icon="@Icons.Material.Filled.Stop"
        />
    </MudButtonGroup>

    <MudContainer Style="display: flex;align-items: center;justify-content: center;flex-wrap: wrap">

        @if (_players != null)
        {
            @foreach (var user in _players)
            {
                <MudCard Style="min-width: 30%;flex-grow: 1;margin:2px" Outlined>
                    <MudCardHeader Style="display:flex;align-items: center;justify-content: center">
                        <MudText>
                            @user.DisplayName - @(user.IsActivePlayer ? "ACTIVE" : $"IN-ACTIVE({user.NotActiveReason})")
                        </MudText>
                    </MudCardHeader>

                    <MudCardContent Style="display: flex;align-items: center;justify-content: center">
                        <MudButtonGroup Variant="Variant.Outlined">
                            @foreach (var matchActionType in Enum.GetValues<MatchActionType>())
                            {
                                <MudButton Disabled="!user.IsActivePlayer"
                                           OnClick="async ()=> await AddAction(user,matchActionType)">@matchActionType.ToString()</MudButton>
                            }
                        </MudButtonGroup>
                    </MudCardContent>

                </MudCard>
            }
        }
    </MudContainer>
}

@code {
    [Inject] private IUserService _userService { get; set; }
    [Inject] private IMatchService _matchService { get; set; }
    [Inject] private IMatchActionService _matchActionService { get; set; }
    [Inject] private IDialogService _dialogService { get; set; }
    [Inject] private ISnackbar _snackbar { get; set; }

    private MatchInputModel _inputModel = new MatchInputModel();
    private List<ApplicationUser> _players { get; set; }
    private Match _match = null;
    private Stopwatch _stopwatch;
    private bool _isMatchRunning;

    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _timer = new Timer(async obj => await InvokeAsync(StateHasChanged), null, 0, 1000);
        
    }

    private TimeSpan DurationSinceBegin()
    {
        return _stopwatch.Elapsed;
    }

    private async Task AddAction(ApplicationUser user, MatchActionType matchAction)
    {
        if (!_isMatchRunning)
            return;
        if (!user.IsActivePlayer)
            return;
        var isSuccess = await _matchActionService.CreateMatchActionAsync(
            new MatchAction()
            {
                ActionType = matchAction,
                TimeAfterMatchBeginSeconds = (float)DurationSinceBegin().TotalSeconds,
                Player = user,
                Match = _match,
            });
        if (isSuccess)
            _snackbar.Add($"User: {user.DisplayName} did {matchAction.ToString()}", Severity.Success);
        else
            _snackbar.Add($"Error recording Action {matchAction.ToString()} for {user.DisplayName}", Severity.Error);
    }

    private void PauseMatch()
    {
        _isMatchRunning = false;
        _stopwatch.Stop();
        _snackbar.Add($"Match paused",Severity.Info);
    }

    private async Task<MatchResult?> OpenGetMatchResultDialog()
    {
        MatchResult? _matchResult = null;
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
        };

        var dialog = await _dialogService.ShowAsync<GetMatchResultDialog>("Match Result", options);

        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            _matchResult = (MatchResult?)result.Data;
        }


        return _matchResult;
    }

    private async Task EndMatch()
    {
        PauseMatch();
        var matchResult = await OpenGetMatchResultDialog();
        if (matchResult.HasValue)
        {
            _match.MatchResult = matchResult.Value;
            await _matchService.UpdateMatchAsync(_match);
            _match = null;
            _inputModel = new MatchInputModel();
            _snackbar.Add($"Match ended",Severity.Success);
        }
        else
        {
            ContinueMatch();
            
        }
    }

    private void ContinueMatch()
    {
        _isMatchRunning = true;
        _stopwatch.Start();
        _snackbar.Add("Continue Match",Severity.Info);
    }

    private class MatchInputModel
    {
        [StringLength(64, MinimumLength = 3)]
        [Required]
        public string Name { get; set; } = string.Empty;

        public TimeSpan? MatchTime { get; set; } = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, 0);
        public DateTime? MatchDate { get; set; } = DateTime.Today;

        public bool IsValid()
        {
            return !string.IsNullOrEmpty(Name) && Name.Length is >= 3 and <= 64
                                               && MatchDate.HasValue && MatchTime.HasValue;
        }
    }

    private async Task SubmitMatchData()
    {
        if (_inputModel.IsValid())
        {
            _players = (await _userService.GetAllUsersInRole(Roles.TeamPlayer))
                .OrderBy(player => !player.IsActivePlayer).ToList();


            var matchDto = new MatchCreateDto(_inputModel.Name, MatchResult.UnSet,
                _inputModel.MatchDate.Value + _inputModel.MatchTime.Value,
                _players.Select(p => p.Id).ToList(), []);
            _match = await _matchService.CreateMatchAsync(matchDto);
            if (_match != null)
            {
                _stopwatch = new Stopwatch();
                _stopwatch.Start();
                _isMatchRunning = true;
            }

            _snackbar.Add("Match began",Severity.Success);
        }
        else
        {
            _match = null;
            _snackbar.Add("Failed to start match", Severity.Error);
        }
    }

}

