@page "/teamManagement"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SportStatisticsApp.Components.Dialogs
@using SportStatisticsApp.Data
@using SportStatisticsApp.Models
@using SportStatisticsApp.Services.Users
@attribute [Authorize(Roles = $"{Roles.Coach}")]
@rendermode InteractiveServer

<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>


<MudText Typo="Typo.h3" Style="display: flex;align-items: start;justify-content: center;margin-bottom: 10px">Team Management</MudText>
<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Text="Players">

        @if (_players != null)
        {
            <MudContainer Style="display: flex;flex-wrap: wrap;align-items: center;justify-content: center">
                @foreach (ApplicationUser player in _players)
                {
                    <MudCard Style="min-width: 32%;margin: 2px;flex-grow: 1" Outlined="true">
                        <MudCardHeader Style="display: flex;align-items: center;flex-direction: column">
                            <MudText Color="Color.Primary" Typo="Typo.h6">@player.DisplayName</MudText>
                            <MudText Color="Color.Secondary" Typo="Typo.subtitle1">@player.Email</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>
                                @(player.IsActivePlayer ? "Active" : $"Not Active: {player.NotActiveReason}")
                            </MudText>
                            <MudText>Matches played
                                : @(player.MatchesPlayed != null ? $"{player.MatchesPlayed.Count}" : "NULL")</MudText>
                            <MudCardActions Style="display: flex;align-items: center;justify-content: center">


                                
                                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                                <MudButton OnClick="@(async () => await ChangePlayerAvailability(player))"
                                           Size="@Size.Small" 
                                           Color="@Color.Primary">
                                    @(player.IsActivePlayer ? "Disable" : $"Enable")
                                </MudButton>

                                

                                <MudIconButton
                                    Size="@Size.Small" 
                                    Color="@Color.Info"
                                    Icon="@Icons.Material.Filled.Notes"
                                    @onclick="@(() => _navigationManager.NavigateTo($"/playerData/{player.Id}"))"
                                    title="Details">
                                    
                                </MudIconButton>
                                
                                <MudIconButton Size="@Size.Small" 
                                               OnClick="@(async () => await RemoveFromTeam(@player))"
                                               Color="@Color.Error"
                                               Icon="@Icons.Material.Filled.PersonRemove"
                                               title="Kick from Team"
                                >
                                    Kick from Team
                                </MudIconButton>
                                </MudButtonGroup>
                            </MudCardActions>
                        </MudCardContent>

                    </MudCard>
                }
            </MudContainer>
        }
    </MudExpansionPanel>

    <MudExpansionPanel Text="Pending Requests">
        @if (_normalUser != null)
        {
            <MudContainer Style="display: flex;flex-wrap: wrap;align-items: center;justify-content: center">
                @foreach (ApplicationUser pendingUser in _normalUser)
                {
                    <MudCard Style="flex-grow:1;min-width: 32%;margin: 2px" Outlined="true">
                        <MudCardHeader Style="display: flex;flex-direction: column;align-items: center">
                            <MudText Color="Color.Primary" Typo="Typo.h6">@pendingUser.DisplayName</MudText>

                            <MudText Color="Color.Secondary" Typo="Typo.subtitle1">@pendingUser.Email</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudCardActions Style="display: flex;align-items: center;justify-content: center">
                                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                                <MudIconButton Size="Size.Small" 
                                               OnClick="@(async () => await AddUserToTeam(@pendingUser))"
                                               Color="@Color.Primary"
                                               Icon="@Icons.Material.Filled.Add"
                                               title="Add to Team">
                                </MudIconButton>
                                
                                <MudIconButton Size="@Size.Small" 
                                               OnClick="@(async () => await DeleteUser(@pendingUser))"
                                               Color="@Color.Error" Icon="@Icons.Material.Filled.Delete"
                                               title="Delete User">

                                </MudIconButton>
                                </MudButtonGroup>
                            </MudCardActions>
                        </MudCardContent>
                    </MudCard>
                }
            </MudContainer>
        }

    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [Inject] private IUserService _userService { get; set; }
    [Inject] private IDialogService _dialogService { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private ISnackbar _snackbar { get; set; }
    private List<ApplicationUser> _normalUser;
    private List<ApplicationUser> _players;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async Task DeleteUser(ApplicationUser user)
    {
        await _userService.UserManager.DeleteAsync(user);
        await GetUsers();
        _snackbar.Add($"Deleted User:{user.DisplayName}",Severity.Success);
    }

    private async Task RemoveFromTeam(ApplicationUser user)
    {
        await _userService.UserManager.AddToRoleAsync(user, Roles.NormalUser);
        await _userService.UserManager.RemoveFromRoleAsync(user, Roles.Coach);
        await _userService.UserManager.RemoveFromRoleAsync(user, Roles.TeamPlayer);
        await GetUsers();
        _snackbar.Add($"Removed User:{user.DisplayName} from team",Severity.Success);
    }

    private async Task AddUserToTeam(ApplicationUser user)
    {
        await _userService.UserManager.AddToRoleAsync(user, Roles.TeamPlayer);
        await _userService.UserManager.RemoveFromRoleAsync(user, Roles.Coach);
        await _userService.UserManager.RemoveFromRoleAsync(user, Roles.NormalUser);
        await GetUsers();
        _snackbar.Add($"Added User:{user.DisplayName} to team",Severity.Success);
    }

    private async Task<bool> OpenEnablePlayerDialog()
    {
        var result = await _dialogService.ShowMessageBox("Enable User",
            "Are you sure you want to enable user", 
            yesText: "Yes", cancelText: "Cancel");
        return result == true;
    }

    private async Task<string> OpenDisablePlayerDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };

        var dialog = await _dialogService.ShowAsync<DisablePlayerDialog>("Disable player", options);

        var result = await dialog.Result;
        if (result is not null && result.Canceled == false && (string?)(result.Data) != null && !string.IsNullOrEmpty((string)result.Data))
        {
            return (string)result.Data;
        }

        return string.Empty;
    }

    private async Task ChangePlayerAvailability(ApplicationUser player)
    {
        var user = await _userService.GetUserById(player.Id);
        if (user != null)
        {
            if (!user.IsActivePlayer)
            {
                if (await OpenEnablePlayerDialog())
                {
                    await _userService.EnableUser(user.Id);
                    _snackbar.Add($"Enabled User:{user.DisplayName}",Severity.Success);
                }
            }
            else if (user.IsActivePlayer)
            {
                string reason = await OpenDisablePlayerDialog();
                if (!string.IsNullOrEmpty(reason))
                {
                    await _userService.DisableUser(user.Id, reason);
                    _snackbar.Add($"Disabled User:{user.DisplayName} due to {reason}",Severity.Success);
                }
                else
                {
                    _snackbar.Add($"Reason for disabling {user.DisplayName} cannot be empty",Severity.Error);
                }
            }
        }
        else
        {
            throw new Exception("USER NOT FOUND");
        }
    }

    private async Task GetUsers()
    {
        _normalUser = new List<ApplicationUser>();
        _normalUser.EnsureCapacity(32);
        _players = new List<ApplicationUser>();
        _players.EnsureCapacity(32);
        foreach (var user in _userService.UserManager.Users.Include(x => x.MatchesPlayed))
        {
            if (await _userService.UserManager.IsInRoleAsync(user, Roles.TeamPlayer))
            {
                _players.Add(user);
            }

            if (await _userService.UserManager.IsInRoleAsync(user, Roles.NormalUser))
            {
                _normalUser.Add(user);
            }
        }
    }
}