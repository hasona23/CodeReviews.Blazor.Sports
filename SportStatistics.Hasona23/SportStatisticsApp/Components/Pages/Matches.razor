@page "/matchesManagement"
@using Microsoft.AspNetCore.Authorization
@using SportStatisticsApp.Components.Dialogs
@using SportStatisticsApp.Models
@using SportStatisticsApp.Services.Matches
@attribute [Authorize(Roles = $"{Roles.Coach},{Roles.TeamPlayer}")]
@rendermode InteractiveServer
<MudDialogProvider/>
<MudPopoverProvider/>

<MudText Style="display: flex;align-items: center;justify-content: center;" Typo="Typo.h3">Matches</MudText>

@if (_matches != null)
{
    <MudTable Items="@_matches" Hover Bordered Outlined Striped="false" Filter="@(new Func<Match,bool>(FilterMatches))">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Matches</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" 
                          IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <HeaderContent>
            <MudTh >Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Time</MudTh>
            <MudTh>Result</MudTh>
            <AuthorizeView>
                @if (context.User.IsInRole(Roles.Coach))
                {
                    <MudTh>Actions</MudTh>
                }
            </AuthorizeView>
        </HeaderContent>
        <RowTemplate>
            @{
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Date">@context.Date.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Time">@context.Date.ToString("hh:mm")</MudTd>
                <MudTd DataLabel="Result">@context.MatchResult.ToString()</MudTd>
            }
            @{
                <AuthorizeView Context="authState">
                    @if (authState.User.IsInRole(Roles.Coach))
                    {
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup>
                                <MudIconButton title="Update" Color="Color.Warning" 
                                               Icon="@Icons.Material.Filled.Update"
                                               OnClick="@(async () => await UpdateMatch(context))"></MudIconButton>

                                <MudIconButton title="Delete" Color="Color.Error" 
                                               Icon="@Icons.Material.Filled.Delete"
                                               OnClick="@(async () => await DeleteMatch(context.Id))"></MudIconButton>
                            </MudButtonGroup>
                        </MudTd>
                    }
                </AuthorizeView>
            }
        </RowTemplate>
        
    </MudTable>
    
}

@code {
    [Inject] private IMatchService _matchService { get; set; }
    [Inject] private IDialogService _dialogService { get; set; }
    private IEnumerable<Match> _matches = new List<Match>();
    private string _searchString  = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _matches = await _matchService.GetMatchesAsync();
    }

    
    private bool FilterMatches(Match match) => SearchMatches(match, _searchString);

    private bool SearchMatches(Match match, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (match.Name.Contains(searchString,StringComparison.OrdinalIgnoreCase))
            return true;
            
        return false;
    }

    private async Task DeleteMatch(int id)
    {
        bool? result = await _dialogService.ShowMessageBox("Delete Match",
            "Are you sure you want to delete this match",
            yesText:"Yes",cancelText:"Cancel");
        if (result == true)
        {
            await _matchService.DeleteMatchAsync(id);
        }
        StateHasChanged();
    }

    
    private async Task UpdateMatch(Match match)
    {
        var dialogOptions = new DialogOptions()
        {
            CloseOnEscapeKey = true,
        };
        var dialogParams = new DialogParameters<UpdateMatchDialog>()
        {
            {x => x.Match,match}
        };
        var dialogReference = await _dialogService.ShowAsync<UpdateMatchDialog>("Update Match",dialogParams,dialogOptions);
        if (dialogReference != null)
        {
            var result = await dialogReference.Result;

            if (result != null && !result.Canceled)
            {
                await _matchService.UpdateMatchAsync(match);
            }
        }
    }

}